stage.setOnShown(new EventHandler<WindowEvent>() {
            @Override
            public void handle(WindowEvent event) {
                BorderPane borderPane = fxmlLoader.getRoot();
                System.out.println(borderPane.getWidth() + " " + borderPane.getHeight());
            }
        });

        treeView.setOnContextMenuRequested(new EventHandler<ContextMenuEvent>() {
                    @Override
                    public void handle(ContextMenuEvent event) {
                        System.out.println("右键点击");
                    }
                });
    /*
    *  根据树结构提供的功能,自定义组件显示太麻烦放弃
    * */
    public static Callback<TreeView<Object>, TreeCell<Object>> treeCallback() {
        return new Callback<>() {
            @Override
            public TreeCell<Object> call(TreeView<Object> param) {
                return new TreeCell<>() {
                    private final HBox hBox;
                    private final Text text;

                    {
                        setContentDisplay(ContentDisplay.RIGHT);
                        hBox = new HBox();
                        hBox.setAlignment(Pos.CENTER_LEFT);
                        text = new Text();
                        hBox.getChildren().addAll(new FontIcon("fas-globe"), text, new Text("添加子级"));
                    }

                    @Override
                    protected void updateItem(Object item, boolean empty) {
                        super.updateItem(item, empty);
                        setText(null);
                        if (item == null || empty) {
                            setGraphic(null);
                        } else {
                            switch (item) {
                                case String s -> text.setText(s);
                                case TreeWorld treeWorld -> text.setText(treeWorld.getTitle());
                                case TreeArea treeArea -> text.setText(treeArea.getTitle());
                                case TreeGameMap treeGameApp -> text.setText(treeGameApp.getTitle());
                                case null, default -> throw new RuntimeException("TreeWorld-treeCallback-类型错误");
                            }
                            setGraphic(hBox);
                        }
                    }
                };
            }
        };
    }

WritableImage writableImage = new WritableImage(image.getPixelReader(), image.widthProperty().intValue(), image.heightProperty().intValue());
System.out.println(source.getImage().getUrl());

            graphicsContext.setStroke(Color.GREENYELLOW);
            graphicsContext.setLineWidth(1);
            graphicsContext.strokePolyline(new double[]{0, width, width, 0, 0}, new double[]{0, 0, height, height, 0}, 5);

                        graphicsContext.setImageSmoothing(true);
                        graphicsContext.setLineCap(StrokeLineCap.SQUARE);
                        graphicsContext.setLineJoin(StrokeLineJoin.ROUND);
                        graphicsContext.setFillRule(FillRule.EVEN_ODD);
                        graphicsContext.setFill(Color.LIGHTBLUE);
                        /*      int startX = (int) backgroundImageData.getStartX();
                                int startY = (int) backgroundImageData.getStartY();
                                int width = (int) image.getWidth();
                                int height = (int) image.getHeight();
                                for (int y = 0; y < height; y++) {
                                    for (int x = 0; x < width; x++) {
                                        Color color = image.getPixelReader().getColor(x, y);
                                        if (!color.equals(EMPTY_COLOR)) {
                                            graphicsContext.getPixelWriter().setColor(startX + x, startY + y,
                                                    Color.color(color.getRed(), color.getGreen(), color.getBlue(), opacity));
                                        }
                                    }
                                }
                                */
    public String chooseChildTitle(String id) {
        String str = "";
        if (id != null && !id.isBlank()) {
            if (childrenMap != null && !childrenMap.isEmpty()) {
                for (TreeGameMap treeGameMap : childrenMap) {
                    if (treeGameMap.getId().equals(id)) {
                        return treeGameMap.getTitle();
                    }
                }
            }
        }
        return str;
    }
            graphicsContext.drawImage(writableImage, Math.abs(startX), Math.abs(startY), canvasWidth, canvasHeight, 0, 0, canvasWidth, canvasHeight);

        int needWidth = canvasWidth / 2;
        if (needWidth - remainderLeft > 0) {
            int needLeftWidth = needWidth - remainderLeft;
            for (; needLeftWidth > 0; startWidthIndex--) {
                needLeftWidth = needLeftWidth - width;
            }
            startX = needLeftWidth;
        } else {
            startX = needWidth - remainderLeft;
        }
        int needHeight = canvasHeight / 2;

                if (needHeight - remainderTop > 0) {
                    int needTopHeight = needHeight - remainderTop;
                    for (; needTopHeight > 0; startHeightIndex--) {
                        needTopHeight = needTopHeight - height;
                    }
                    startY = needTopHeight;
                } else {
                    startY = needHeight - remainderTop;
                }